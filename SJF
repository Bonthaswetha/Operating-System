#include <stdio.h>

#define MAX_PROCESSES 100

typedef struct {
    int pid, arrival_time, burst_time, remaining_time;
    int completion_time, turnaround_time, waiting_time, response_time;
    int started; 
} Process;
void sjf_preemptive(Process processes[], int n) {
    int completed = 0, time = 0, min_index;
    int min_remaining_time, i;
    
    while (completed != n) {
        min_remaining_time = __INT_MAX__;
        min_index = -1;

      
        for (i = 0; i < n; i++) {
            if (processes[i].arrival_time <= time && processes[i].remaining_time > 0 &&
                processes[i].remaining_time < min_remaining_time) {
                min_remaining_time = processes[i].remaining_time;
                min_index = i;
            }
        }

        if (min_index == -1) {
            time++;  
            continue;
        }

        
        if (processes[min_index].started == 0) {
            processes[min_index].response_time = time - processes[min_index].arrival_time;
            processes[min_index].started = 1;
        }

        
        processes[min_index].remaining_time--;
        time++;

       
        if (processes[min_index].remaining_time == 0) {
            completed++;
            processes[min_index].completion_time = time;
            processes[min_index].turnaround_time = processes[min_index].completion_time - processes[min_index].arrival_time;
            processes[min_index].waiting_time = processes[min_index].turnaround_time - processes[min_index].burst_time;
        }
    }
}

void print_results(Process processes[], int n) {
    float avg_waiting_time = 0, avg_turnaround_time = 0, avg_response_time = 0;
    printf("\nPID\tArrival\tBurst\tCompletion\tTurnaround\tWaiting\tResponse\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t\t%d\t\t%d\t%d\n", processes[i].pid, processes[i].arrival_time,
               processes[i].burst_time, processes[i].completion_time, processes[i].turnaround_time,
               processes[i].waiting_time, processes[i].response_time);
        avg_waiting_time += processes[i].waiting_time;
        avg_turnaround_time += processes[i].turnaround_time;
        avg_response_time += processes[i].response_time;
    }

    avg_waiting_time /= n;
    avg_turnaround_time /= n;
    avg_response_time /= n;
    printf("\nAverage Turnaround Time: %.2f", avg_turnaround_time);
    printf("\nAverage Waiting Time: %.2f", avg_waiting_time);
    printf("\nAverage Response Time: %.2f\n", avg_response_time);
}

int main() {
    int n;
    Process processes[MAX_PROCESSES];

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("enter arrival time and burst time for for process %d: ", i + 1);
        scanf("%d %d", &processes[i].arrival_time,&processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
        processes[i].started = 0;  // Mark as not started
    }

    sjf_preemptive(processes, n);
    print_results(processes, n);

    return 0;
}

-----------------------------------------------------------------------------------
output:

Enter the number of processes: 5
Enter arrival time and burst time for each process:
enter arrival time and burst time for for process 1: 3
5
enter arrival time and burst time for for process 2: 7
9
enter arrival time and burst time for for process 3: 6
3
enter arrival time and burst time for for process 4: 7
3
enter arrival time and burst time for for process 5: 9
4

PID     Arrival Burst   Completion      Turnaround      Waiting Response
1       3       5       8               5               0       0
2       7       9       27              20              11      11
3       6       3       11              5               2       2
4       7       3       14              7               4       4
5       9       4       18              9               5       5

Average Turnaround Time: 9.20
Average Waiting Time: 4.40
Average Response Time: 4.40
